name: Base Image

on:
  # rebuild the base image each month on the 3rd at 5:17am
  schedule:
    - cron: '17 5 3 * *'

  # or manually via button in UI
  workflow_dispatch:

jobs:
  base:
    name: Create digineode/texd:base
    runs-on: ubuntu-latest
    steps:
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: linux/amd64,linux/arm64/v8

      - name: Setup buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Build base image
        uses: docker/build-push-action@v2
        with:
          file: ./.github/Dockerfile.base
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: digineode/texd:base
          context: .

  release:
    name: Create digineode/texd:v*
    runs-on: ubuntu-latest
    needs: [base]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Find latest tag
        uses: actions/github-script@v6
        with:
          # need different token, RELEASE_TOKEN belongs to digineobot
          github-token: ${{ secrets.RELEASE_TOKEN }}
          script: |
            const common = {
              owner: context.repo.owner,
              repo:  context.repo.repo,
            }

            const { data: { tag_name: releaseTag } } = await github.rest.repos.getLatestRelease({
              ...common,
            })

            const { data: { object: { sha: releaseRef } } } = await github.rest.git.getRef({
              ...common,
              ref: `tags/${releaseTag}`,
            })

            const { data: { object: { sha: masterRef } } } = await github.rest.git.getRef({
              ...common,
              ref: 'heads/master',
            })

            await github.rest.actions.createWorkflowDispatch({
              ...common,
              workflow_id: 'release.yml',
              ref:         releaseRef,
              inputs: {
                goreleaser:  'false',
                releaseType: 'release',
              }
            })

            if (releaseRef !== masterRef) {
              await github.rest.actions.createWorkflowDispatch({
                ..common,
                workflow_id: 'release.yml',
                ref:         releaseRef,
                inputs: {
                  goreleaser:  'false',
                  releaseType: 'dev',
                }
              })
            }
