name: Test, Lint, Release

on:
  push:
    branches: [master]
    tags:     [v*]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.x]

    steps:
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-${{ matrix.go-version }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.go-version }}-go-

      - name: Run tests
        run: make test

  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.x]

    steps:
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-${{ matrix.go-version }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.go-version }}-go-

      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          skip-cache: true

  release:
    needs: [test, lint]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.x]

    steps:
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-${{ matrix.go-version }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.go-version }}-go-

      # The following actions need to interact with Docker
      - if: github.event_name != 'pull_request'
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Create releases for new tags
      - if: startsWith(github.ref, 'refs/tags/')
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # For untagged commits to master, first build packages...
      - if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        name: Build digineode/texd:latest
        run: make docker-latest

      # ...and push *only* the latest Docker image.
      - if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
        name: Push Docker images
        run: docker push digineode/texd:latest
