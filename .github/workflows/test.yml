name: Test, Lint, Release

on:
  push:
    branches:
      - "*"
    tags-ignore:
      - base/*
  pull_request:

env:
  GO_VERSION: "1.18"

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest

    steps:
      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Go modules
        uses: actions/cache@v3.0.2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_VERSION }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_VERSION }}-go-

      - name: Run tests
        run: make test

      - uses: codecov/codecov-action@v3
        with:
          file: coverage.out

  lint:
    name: Run linter
    runs-on: ubuntu-latest

    steps:
      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Go modules
        uses: actions/cache@v3.0.2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_VERSION }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_VERSION }}-go-

      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          skip-cache: true

  release:
    name: Create release artifacts
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'pull_request'
    needs: [test, lint]

    runs-on: ubuntu-latest

    steps:
      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Go modules
        uses: actions/cache@v3.0.2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_VERSION }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_VERSION }}-go-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: linux/amd64,linux/arm64/v8

      - name: Setup buildx
        uses: docker/setup-buildx-action@v1

      - name: Build binaries
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        uses: docker/metadata-action@v3
        id: meta
        with:
          images: digineode/texd
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}

      - name: Docker image
        uses: docker/build-push-action@v2
        with:
          file: ./.github/Dockerfile.release
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            IS_RELEASE=1
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: .

  latest:
    name: Create digineode/texd:latest image
    if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
    needs: [test, lint]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: linux/amd64,linux/arm64/v8

      - name: Setup buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker meta
        uses: docker/metadata-action@v3
        id: meta
        with:
          images: digineode/texd
          tags: latest

      - name: Docker image
        uses: docker/build-push-action@v2
        with:
          file: ./.github/Dockerfile.release
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            IS_RELEASE=0
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: .
